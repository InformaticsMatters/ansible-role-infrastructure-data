---

# Creates a database for the user.
# Key, required, variables are: -
#
# - id_db
# - id_db_user_namespace <- A namespace (which must exist)
# - id_db_user           <- Optional ... randomly generated if not defined
# - id_db_user_password  <- Optional ... randomly generated if not defined
#
# As a result of successfully adding a database (and user)
# a Secret is deposited into the user's namespace.
# With the secret present another database (for the same namespace)
# cannot be created. It is up to the user to delete this secret
# after they've deleted the database.

- name: Pre-flight check
  assert:
    that:
    - id_db is defined
    - id_db|string|length > 0
    - id_db != 'SetMe'
    - id_db_user_namespace is defined
    - id_db_user_namespace|string|length > 0
    - id_db_user_namespace != 'SetMe'
    - id_db_user_namespace_sa is defined
    - id_db_user_namespace_sa|string|length > 0
    - id_db_user_namespace_sa != 'SetMe'

- name: Get user namespace
  k8s_facts:
    kind: Namespace
    name: "{{ id_db_user_namespace }}"
  register: ns_result

- name: Assert user namespace
  assert:
    that: ns_result.resources|length == 1
    fail_msg: User namespace does not exist

- name: Get secrets (from {{ id_db_user_namespace }} namepsace)
  k8s_facts:
    kind: Secret
    name: database-secrets-{{ id_db }}
    namespace: "{{ id_db_user_namespace }}"
  register: secret_result

- name: Assert secrets do not exist
  assert:
    that: secret_result.resources|length == 0
    fail_msg: Database secrets already exist in the user's namespace

# Looks like we're ready to go...

- name: Deploy ConfigMap (create)
  k8s:
    definition: "{{ lookup('template', 'configmap-postgres-create-user-db.yaml.j2') }}"
    wait: yes

- name: Remove any existing create Job
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job-create-user-db.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

- name: Launch new create Job
  k8s:
    definition: "{{ lookup('template', 'job-create-user-db.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

- name: Wait for create completion
  k8s_facts:
    kind: Job
    namespace: "{{ id_db_user_namespace }}"
    name: create-user-db
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 4
  retries: "{{ (wait_timeout|int / 4)|int }}"

- name: Display Job status
  debug:
    var: result.resources[0].status

- name: Assert create success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined

# Deposit secrets (describe the DB and password)
# into the user's namespace...

- name: Write database secrets (to {{ id_db_user_namespace }} namepsace)
  k8s:
    definition: "{{ lookup('template', 'secret-postgres-user-db.yaml.j2') }}"
    wait: yes
